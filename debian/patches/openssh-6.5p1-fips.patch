# comply with FIPS 140-2 by using only approved crypto algorithms
# when OpenSSL is detected to be running in FIPS mode
#
# HG changeset patch
# Parent 6536ed881743cbf05afe962021b985f9b1eab495

Index: openssh/Makefile.in
===================================================================
--- openssh.orig/Makefile.in
+++ openssh/Makefile.in
@@ -100,7 +100,8 @@ LIBSSH_OBJS=${LIBOPENSSH_OBJS} \
 	kex.o kexdh.o kexgex.o kexecdh.o kexc25519.o \
 	kexdhc.o kexgexc.o kexecdhc.o kexc25519c.o \
 	kexdhs.o kexgexs.o kexecdhs.o kexc25519s.o \
-	platform-pledge.o platform-tracing.o platform-misc.o
+	platform-pledge.o platform-tracing.o platform-misc.o \
+	fips.o
 
 SSHOBJS= ssh.o readconf.o clientloop.o sshtty.o \
 	sshconnect.o sshconnect2.o mux.o
Index: openssh/cipher-ctr.c
===================================================================
--- openssh.orig/cipher-ctr.c
+++ openssh/cipher-ctr.c
@@ -26,6 +26,7 @@
 
 #include "xmalloc.h"
 #include "log.h"
+#include "fips.h"
 
 /* compatibility with old or broken OpenSSL versions */
 #include "openbsd-compat/openssl-compat.h"
@@ -139,6 +140,8 @@ evp_aes_128_ctr(void)
 #ifndef SSH_OLD_EVP
 	aes_ctr.flags = EVP_CIPH_CBC_MODE | EVP_CIPH_VARIABLE_LENGTH |
 	    EVP_CIPH_ALWAYS_CALL_INIT | EVP_CIPH_CUSTOM_IV;
+	if (fips_mode())
+		aes_ctr.flags |= EVP_CIPH_FLAG_FIPS;
 #endif
 	return (&aes_ctr);
 }
Index: openssh/cipher.c
===================================================================
--- openssh.orig/cipher.c
+++ openssh/cipher.c
@@ -48,6 +48,7 @@
 #include "sshbuf.h"
 #include "ssherr.h"
 #include "digest.h"
+#include "fips.h"
 
 #include "openbsd-compat/openssl-compat.h"
 
@@ -111,8 +112,39 @@ static const struct sshcipher ciphers[]
 	{ NULL,			0, 0, 0, 0, 0, NULL }
 };
 
+static const struct sshcipher ciphers_fips140_2[] = {
+ 	{ "none",		8, 0, 0, 0, CFLAG_NONE, NULL },
+
+	{ "3des-cbc",		8, 24, 0, 0, CFLAG_CBC, EVP_des_ede3_cbc },
+	{ "aes128-cbc",		16, 16, 0, 0, CFLAG_CBC, EVP_aes_128_cbc },
+	{ "aes192-cbc",		16, 24, 0, 0, CFLAG_CBC, EVP_aes_192_cbc },
+	{ "aes256-cbc",		16, 32, 0, 0, CFLAG_CBC, EVP_aes_256_cbc },
+	{ "rijndael-cbc@lysator.liu.se",
+				16, 32, 0, 0, CFLAG_CBC, EVP_aes_256_cbc },
+	{ "aes128-ctr",		16, 16, 0, 0, 0, EVP_aes_128_ctr },
+	{ "aes192-ctr",		16, 24, 0, 0, 0, EVP_aes_192_ctr },
+	{ "aes256-ctr",		16, 32, 0, 0, 0, EVP_aes_256_ctr },
+# ifdef OPENSSL_HAVE_EVPGCM
+	{ "aes128-gcm@openssh.com",
+				16, 16, 12, 16, 0, EVP_aes_128_gcm },
+	{ "aes256-gcm@openssh.com",
+				16, 32, 12, 16, 0, EVP_aes_256_gcm },
+# endif /* OPENSSL_HAVE_EVPGCM */
+ 	{ NULL,			0, 0, 0, 0, 0, NULL }
+};
+
 /*--*/
 
+static const struct sshcipher *
+fips_select_ciphers(void)
+{
+	if (fips_mode()) {
+		return ciphers_fips140_2;
+	}
+
+	return ciphers;
+}
+
 /* Returns a comma-separated list of supported ciphers. */
 char *
 cipher_alg_list(char sep, int auth_only)
@@ -121,7 +153,7 @@ cipher_alg_list(char sep, int auth_only)
 	size_t nlen, rlen = 0;
 	const struct sshcipher *c;
 
-	for (c = ciphers; c->name != NULL; c++) {
+	for (c = fips_select_ciphers(); c->name != NULL; c++) {
 		if ((c->flags & CFLAG_INTERNAL) != 0)
 			continue;
 		if (auth_only && c->auth_len == 0)
@@ -193,7 +225,7 @@ const struct sshcipher *
 cipher_by_name(const char *name)
 {
 	const struct sshcipher *c;
-	for (c = ciphers; c->name != NULL; c++)
+	for (c = fips_select_ciphers(); c->name != NULL; c++)
 		if (strcmp(c->name, name) == 0)
 			return c;
 	return NULL;
Index: openssh/fips.c
===================================================================
--- /dev/null
+++ openssh/fips.c
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2012 Petr Cerny.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <openssl/crypto.h>
+
+#include "fips.h"
+
+#include "log.h"
+
+int
+fips_mode()
+{
+	static int fips_state = -1;
+	if (-1 == fips_state) {
+		fips_state = FIPS_mode();
+		if (fips_state)
+			debug("FIPS mode initialized");
+	}
+	return fips_state;
+}
Index: openssh/fips.h
===================================================================
--- /dev/null
+++ openssh/fips.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2012 Petr Cerny.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef FIPS_H
+#define FIPS_H
+
+int	 fips_mode(void);
+
+#endif
+
Index: openssh/kex.c
===================================================================
--- openssh.orig/kex.c
+++ openssh/kex.c
@@ -53,6 +53,7 @@
 #include "ssherr.h"
 #include "sshbuf.h"
 #include "digest.h"
+#include "fips.h"
 
 /* prototype */
 static int kex_choose_conf(struct ssh *);
@@ -106,6 +107,39 @@ static const struct kexalg kexalgs[] = {
 	{ NULL, -1, -1, -1},
 };
 
+static const struct kexalg kexalgs_fips140_2[] = {
+	{ KEX_DH1, KEX_DH_GRP1_SHA1, 0, SSH_DIGEST_SHA1 },
+	{ KEX_DH14_SHA1, KEX_DH_GRP14_SHA1, 0, SSH_DIGEST_SHA1 },
+	{ KEX_DH14_SHA256, KEX_DH_GRP14_SHA256, 0, SSH_DIGEST_SHA256 },
+	{ KEX_DH16_SHA512, KEX_DH_GRP16_SHA512, 0, SSH_DIGEST_SHA512 },
+	{ KEX_DH18_SHA512, KEX_DH_GRP18_SHA512, 0, SSH_DIGEST_SHA512 },
+	{ KEX_DHGEX_SHA1, KEX_DH_GEX_SHA1, 0, SSH_DIGEST_SHA1 },
+#ifdef HAVE_EVP_SHA256
+	{ KEX_DHGEX_SHA256, KEX_DH_GEX_SHA256, 0, SSH_DIGEST_SHA256 },
+#endif
+#ifdef OPENSSL_HAS_ECC
+	{ KEX_ECDH_SHA2_NISTP256, KEX_ECDH_SHA2,
+	    NID_X9_62_prime256v1, SSH_DIGEST_SHA256 },
+	{ KEX_ECDH_SHA2_NISTP384, KEX_ECDH_SHA2, NID_secp384r1,
+	    SSH_DIGEST_SHA384 },
+# ifdef OPENSSL_HAS_NISTP521
+	{ KEX_ECDH_SHA2_NISTP521, KEX_ECDH_SHA2, NID_secp521r1,
+	    SSH_DIGEST_SHA512 },
+# endif
+#endif
+	{ NULL, -1, -1, -1},
+};
+
+static const struct kexalg *
+fips_select_kexalgs(void)
+{
+	if (fips_mode()) {
+		return kexalgs_fips140_2;
+	}
+
+	return kexalgs;
+}
+
 char *
 kex_alg_list(char sep)
 {
@@ -113,7 +147,7 @@ kex_alg_list(char sep)
 	size_t nlen, rlen = 0;
 	const struct kexalg *k;
 
-	for (k = kexalgs; k->name != NULL; k++) {
+	for (k = fips_select_kexalgs(); k->name != NULL; k++) {
 		if (ret != NULL)
 			ret[rlen++] = sep;
 		nlen = strlen(k->name);
@@ -133,7 +167,7 @@ kex_alg_by_name(const char *name)
 {
 	const struct kexalg *k;
 
-	for (k = kexalgs; k->name != NULL; k++) {
+	for (k = fips_select_kexalgs(); k->name != NULL; k++) {
 		if (strcmp(k->name, name) == 0)
 			return k;
 	}
Index: openssh/mac.c
===================================================================
--- openssh.orig/mac.c
+++ openssh/mac.c
@@ -37,6 +37,7 @@
 #include "misc.h"
 #include "ssherr.h"
 #include "sshbuf.h"
+#include "fips.h"
 
 #include "openbsd-compat/openssl-compat.h"
 
@@ -82,6 +83,25 @@ static const struct macalg macs[] = {
 	{ NULL,					0, 0, 0, 0, 0, 0 }
 };
 
+static const struct macalg macs_fips140_2[] = {
+	{ "hmac-sha1",				SSH_DIGEST, SSH_DIGEST_SHA1, 0, 0, 0, 0 },
+#ifdef HAVE_EVP_SHA256
+	{ "hmac-sha2-256",			SSH_DIGEST, SSH_DIGEST_SHA256, 0, 0, 0, 0 },
+	{ "hmac-sha2-512",			SSH_DIGEST, SSH_DIGEST_SHA512, 0, 0, 0, 0 },
+#endif
+	{ NULL,					0, 0, 0, 0, 0, 0 }
+};
+
+static const struct macalg *
+fips_select_macs(void)
+{
+	if (fips_mode()) {
+		return macs_fips140_2;
+	}
+
+	return macs;
+}
+
 /* Returns a list of supported MACs separated by the specified char. */
 char *
 mac_alg_list(char sep)
@@ -90,7 +110,7 @@ mac_alg_list(char sep)
 	size_t nlen, rlen = 0;
 	const struct macalg *m;
 
-	for (m = macs; m->name != NULL; m++) {
+	for (m = fips_select_macs(); m->name != NULL; m++) {
 		if (ret != NULL)
 			ret[rlen++] = sep;
 		nlen = strlen(m->name);
@@ -129,7 +149,7 @@ mac_setup(struct sshmac *mac, char *name
 {
 	const struct macalg *m;
 
-	for (m = macs; m->name != NULL; m++) {
+	for (m = fips_select_macs(); m->name != NULL; m++) {
 		if (strcmp(name, m->name) != 0)
 			continue;
 		if (mac != NULL)
Index: openssh/myproposal.h
===================================================================
--- openssh.orig/myproposal.h
+++ openssh/myproposal.h
@@ -104,6 +104,19 @@
 	KEX_SHA2_GROUP14 \
 	"diffie-hellman-group14-sha1"
 
+#define KEX_FIPS_140_2_SERVER_KEX \
+	KEX_ECDH_METHODS \
+	KEX_SHA2_METHODS \
+	KEX_SHA2_GROUP14 \
+	"diffie-hellman-group14-sha1"
+
+#define KEX_FIPS_140_2_CLIENT_KEX \
+	KEX_ECDH_METHODS \
+	KEX_SHA2_METHODS \
+	"diffie-hellman-group-exchange-sha1," \
+	KEX_SHA2_GROUP14 \
+	"diffie-hellman-group14-sha1"
+
 #define	KEX_DEFAULT_PK_ALG	\
 	HOSTKEY_ECDSA_CERT_METHODS \
 	"ssh-ed25519-cert-v01@openssh.com," \
@@ -116,6 +129,14 @@
 	"rsa-sha2-256," \
 	"ssh-rsa"
 
+#define	KEX_FIPS_140_2_PK_ALG      \
+	HOSTKEY_ECDSA_CERT_METHODS \
+	"ssh-rsa-cert-v01@openssh.com," \
+	HOSTKEY_ECDSA_METHODS \
+	"rsa-sha2-512," \
+	"rsa-sha2-256," \
+	"ssh-rsa"
+
 /* the actual algorithms */
 
 #define KEX_SERVER_ENCRYPT \
@@ -125,7 +146,13 @@
 
 #define KEX_CLIENT_ENCRYPT KEX_SERVER_ENCRYPT
 
-#define KEX_SERVER_MAC \
+#define	KEX_FIPS_140_2_SERVER_ENCRYPT \
+	"aes128-ctr,aes192-ctr,aes256-ctr," \
+	AESGCM_CIPHER_MODES
+
+#define	KEX_FIPS_140_2_CLIENT_ENCRYPT KEX_FIPS_140_2_SERVER_ENCRYPT
+
+#define KEX_SERVER_MAC		   \
 	"umac-64-etm@openssh.com," \
 	"umac-128-etm@openssh.com," \
 	"hmac-sha2-256-etm@openssh.com," \
@@ -139,6 +166,13 @@
 
 #define KEX_CLIENT_MAC KEX_SERVER_MAC
 
+#define	KEX_FIPS_140_2_SERVER_MAC		\
+	"hmac-sha2-256," \
+	"hmac-sha2-512," \
+	"hmac-sha1"
+
+#define	KEX_FIPS_140_2_CLIENT_MAC KEX_FIPS_140_2_SERVER_MAC
+
 #else /* WITH_OPENSSL */
 
 #define KEX_SERVER_KEX		\
Index: openssh/openbsd-compat/arc4random.c
===================================================================
--- openssh.orig/openbsd-compat/arc4random.c
+++ openssh/openbsd-compat/arc4random.c
@@ -45,6 +45,7 @@
 #endif
 
 #include "log.h"
+#include "fips.h"
 
 #define KEYSTREAM_ONLY
 #include "chacha_private.h"
@@ -210,26 +211,30 @@ _rs_random_u32(u_int32_t *val)
 void
 arc4random_stir(void)
 {
-	_ARC4_LOCK();
-	_rs_stir();
-	_ARC4_UNLOCK();
+	if (!fips_mode()) {
+		_ARC4_LOCK();
+		_rs_stir();
+		_ARC4_UNLOCK();
+	}
 }
 
 void
 arc4random_addrandom(u_char *dat, int datlen)
 {
-	int m;
+	if (!fips_mode()) {
+		int m;
 
-	_ARC4_LOCK();
-	if (!rs_initialized)
-		_rs_stir();
-	while (datlen > 0) {
-		m = MIN(datlen, KEYSZ + IVSZ);
-		_rs_rekey(dat, m);
-		dat += m;
-		datlen -= m;
+		_ARC4_LOCK();
+		if (!rs_initialized)
+			_rs_stir();
+		while (datlen > 0) {
+			m = MIN(datlen, KEYSZ + IVSZ);
+			_rs_rekey(dat, m);
+			dat += m;
+			datlen -= m;
+		}
+		_ARC4_UNLOCK();
 	}
-	_ARC4_UNLOCK();
 }
 
 u_int32_t
@@ -238,7 +243,11 @@ arc4random(void)
 	u_int32_t val;
 
 	_ARC4_LOCK();
-	_rs_random_u32(&val);
+	if (fips_mode()) {
+		RAND_bytes((u_int8_t *)&val, sizeof(val));
+	} else {
+		_rs_random_u32(&val);
+	}
 	_ARC4_UNLOCK();
 	return val;
 }
@@ -252,7 +261,11 @@ void
 arc4random_buf(void *buf, size_t n)
 {
 	_ARC4_LOCK();
-	_rs_random_buf(buf, n);
+	if (fips_mode()) {
+		RAND_bytes(buf, n);
+	} else {
+		_rs_random_buf(buf, n);
+	}
 	_ARC4_UNLOCK();
 }
 # endif /* !HAVE_ARC4RANDOM_BUF */
Index: openssh/sshconnect2.c
===================================================================
--- openssh.orig/sshconnect2.c
+++ openssh/sshconnect2.c
@@ -72,6 +72,7 @@
 #include "hostfile.h"
 #include "ssherr.h"
 #include "utf8.h"
+#include "fips.h"
 
 #ifdef GSSAPI
 #include "ssh-gss.h"
@@ -117,7 +118,7 @@ order_hostkeyalgs(char *host, struct soc
 	for (i = 0; i < options.num_system_hostfiles; i++)
 		load_hostkeys(hostkeys, hostname, options.system_hostfiles[i]);
 
-	oavail = avail = xstrdup(KEX_DEFAULT_PK_ALG);
+	oavail = avail = xstrdup(fips_mode() ? KEX_FIPS_140_2_PK_ALG : KEX_DEFAULT_PK_ALG);
 	maxlen = strlen(avail) + 1;
 	first = xmalloc(maxlen);
 	last = xmalloc(maxlen);
@@ -180,14 +181,14 @@ ssh_kex2(char *host, struct sockaddr *ho
 	if (options.hostkeyalgorithms != NULL) {
 		all_key = sshkey_alg_list(0, 0, 1, ',');
 		if (kex_assemble_names(&options.hostkeyalgorithms,
-		    KEX_DEFAULT_PK_ALG, all_key) != 0)
+		    fips_mode() ? KEX_FIPS_140_2_PK_ALG : KEX_DEFAULT_PK_ALG, all_key) != 0)
 			fatal("%s: kex_assemble_namelist", __func__);
 		free(all_key);
 		myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] =
 		    compat_pkalg_proposal(options.hostkeyalgorithms);
 	} else {
 		/* Enforce default */
-		options.hostkeyalgorithms = xstrdup(KEX_DEFAULT_PK_ALG);
+		options.hostkeyalgorithms = xstrdup(fips_mode() ? KEX_FIPS_140_2_PK_ALG : KEX_DEFAULT_PK_ALG);
 		/* Prefer algorithms that we already have keys for */
 		myproposal[PROPOSAL_SERVER_HOST_KEY_ALGS] =
 		    compat_pkalg_proposal(
Index: openssh/ssh-dss.c
===================================================================
--- openssh.orig/ssh-dss.c
+++ openssh/ssh-dss.c
@@ -50,9 +50,16 @@ int
 ssh_dss_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,
     const u_char *data, size_t datalen, u_int compat)
 {
+	const EVP_MD *evp_md = EVP_dss1();
+	EVP_MD_CTX md;
+	u_char *tsig;
+	const unsigned char *psig;
+	EVP_PKEY *pkey;
+	int signature_ok = 0;
 	DSA_SIG *sig = NULL;
-	u_char digest[SSH_DIGEST_MAX_LENGTH], sigblob[SIGBLOB_LEN];
-	size_t rlen, slen, len, dlen = ssh_digest_bytes(SSH_DIGEST_SHA1);
+	u_char sigblob[SIGBLOB_LEN];
+	size_t rlen, slen;
+	u_int len = 0;
 	struct sshbuf *b = NULL;
 	int ret = SSH_ERR_INVALID_ARGUMENT;
 
@@ -64,18 +71,44 @@ ssh_dss_sign(const struct sshkey *key, u
 	if (key == NULL || key->dsa == NULL ||
 	    sshkey_type_plain(key->type) != KEY_DSA)
 		return SSH_ERR_INVALID_ARGUMENT;
-	if (dlen == 0)
-		return SSH_ERR_INTERNAL_ERROR;
 
-	if ((ret = ssh_digest_memory(SSH_DIGEST_SHA1, data, datalen,
-	    digest, sizeof(digest))) != 0)
+	pkey = EVP_PKEY_new();
+	if (pkey == NULL) {
+		ret = SSH_ERR_LIBCRYPTO_ERROR;
+		goto out;
+	}
+
+	EVP_PKEY_set1_DSA(pkey, key->dsa);
+	slen = EVP_PKEY_size(pkey);
+	if ((psig = tsig = malloc(slen)) == NULL) {
+		EVP_PKEY_free(pkey);
+		ret = SSH_ERR_ALLOC_FAIL;
 		goto out;
+	}
+
+	EVP_MD_CTX_init(&md);
+	if (EVP_SignInit_ex(&md, evp_md, NULL) == 1 &&
+	    EVP_SignUpdate(&md, data, datalen) == 1) {
+		signature_ok = EVP_SignFinal(&md, tsig, &len, pkey);
+	}
+	EVP_MD_CTX_cleanup(&md);
+	EVP_PKEY_free(pkey);
 
-	if ((sig = DSA_do_sign(digest, dlen, key->dsa)) == NULL) {
+	if (signature_ok != 1) {
+		free(tsig);
 		ret = SSH_ERR_LIBCRYPTO_ERROR;
 		goto out;
 	}
 
+	/* Output of EVP_SignFinal() is encoded, convert to DSA_SIG */
+	sig = d2i_DSA_SIG(NULL, &psig, len);
+	explicit_bzero(tsig, len);
+	free(tsig);
+ 	if (sig == NULL) {
+		ret = SSH_ERR_LIBCRYPTO_ERROR;
+		goto out;
+ 	}
+
 	rlen = BN_num_bytes(sig->r);
 	slen = BN_num_bytes(sig->s);
 	if (rlen > INTBLOB_LEN || slen > INTBLOB_LEN) {
@@ -106,7 +139,6 @@ ssh_dss_sign(const struct sshkey *key, u
 		*lenp = len;
 	ret = 0;
  out:
-	explicit_bzero(digest, sizeof(digest));
 	DSA_SIG_free(sig);
 	sshbuf_free(b);
 	return ret;
@@ -117,9 +149,13 @@ ssh_dss_verify(const struct sshkey *key,
     const u_char *signature, size_t signaturelen,
     const u_char *data, size_t datalen, u_int compat)
 {
+	const EVP_MD *evp_md = EVP_dss1();
+	EVP_MD_CTX md;
+	u_char *psig, *tsig;
+	EVP_PKEY *pkey;
 	DSA_SIG *sig = NULL;
-	u_char digest[SSH_DIGEST_MAX_LENGTH], *sigblob = NULL;
-	size_t len, dlen = ssh_digest_bytes(SSH_DIGEST_SHA1);
+	u_char *sigblob = NULL;
+	size_t len;
 	int ret = SSH_ERR_INTERNAL_ERROR;
 	struct sshbuf *b = NULL;
 	char *ktype = NULL;
@@ -128,8 +164,6 @@ ssh_dss_verify(const struct sshkey *key,
 	    sshkey_type_plain(key->type) != KEY_DSA ||
 	    signature == NULL || signaturelen == 0)
 		return SSH_ERR_INVALID_ARGUMENT;
-	if (dlen == 0)
-		return SSH_ERR_INTERNAL_ERROR;
 
 	/* fetch signature */
 	if ((b = sshbuf_from(signature, signaturelen)) == NULL)
@@ -166,12 +200,31 @@ ssh_dss_verify(const struct sshkey *key,
 		goto out;
 	}
 
-	/* sha1 the data */
-	if ((ret = ssh_digest_memory(SSH_DIGEST_SHA1, data, datalen,
-	    digest, sizeof(digest))) != 0)
+	/* Sig is a DSA_SIG structure; convert to encoded buffer */
+	len = i2d_DSA_SIG(sig, NULL);
+	if ((psig = tsig = malloc(len)) == NULL) {
+		ret = SSH_ERR_ALLOC_FAIL;
 		goto out;
+	}
+	i2d_DSA_SIG(sig, &psig);
 
-	switch (DSA_do_verify(digest, dlen, sig, key->dsa)) {
+	/* Verify the signature */
+	pkey = EVP_PKEY_new();
+	if (pkey != NULL) {
+		EVP_PKEY_set1_DSA(pkey, key->dsa);
+
+		EVP_MD_CTX_init(&md);
+		if (EVP_VerifyInit(&md, evp_md) == 1 &&
+		    EVP_VerifyUpdate(&md, data, datalen) == 1) {
+			ret = EVP_VerifyFinal(&md, tsig, len, pkey);
+		}
+		EVP_MD_CTX_cleanup(&md);
+		EVP_PKEY_free(pkey);
+	}
+	explicit_bzero(tsig, len);
+	free(tsig);
+ 
+	switch (ret) {
 	case 1:
 		ret = 0;
 		break;
@@ -184,7 +237,6 @@ ssh_dss_verify(const struct sshkey *key,
 	}
 
  out:
-	explicit_bzero(digest, sizeof(digest));
 	DSA_SIG_free(sig);
 	sshbuf_free(b);
 	free(ktype);
Index: openssh/ssh-rsa.c
===================================================================
--- openssh.orig/ssh-rsa.c
+++ openssh/ssh-rsa.c
@@ -35,8 +35,6 @@
 #include "digest.h"
 #include "log.h"
 
-static int openssh_RSA_verify(int, u_char *, size_t, u_char *, size_t, RSA *);
-
 static const char *
 rsa_hash_alg_ident(int hash_alg)
 {
@@ -145,10 +143,13 @@ int
 ssh_rsa_sign(const struct sshkey *key, u_char **sigp, size_t *lenp,
     const u_char *data, size_t datalen, const char *alg_ident)
 {
-	u_char digest[SSH_DIGEST_MAX_LENGTH], *sig = NULL;
+	const EVP_MD *evp_md;
+	EVP_MD_CTX md;
+	EVP_PKEY *pkey;
+	u_char *sig = NULL;
 	size_t slen = 0;
-	u_int dlen, len;
-	int nid, hash_alg, ret = SSH_ERR_INTERNAL_ERROR;
+	u_int len = 0;
+	int hash_alg, ret = SSH_ERR_INTERNAL_ERROR;
 	struct sshbuf *b = NULL;
 
 	if (lenp != NULL)
@@ -165,27 +166,37 @@ ssh_rsa_sign(const struct sshkey *key, u
 		return SSH_ERR_INVALID_ARGUMENT;
 	if (BN_num_bits(key->rsa->n) < SSH_RSA_MINIMUM_MODULUS_SIZE)
 		return SSH_ERR_KEY_LENGTH;
-	slen = RSA_size(key->rsa);
-	if (slen <= 0 || slen > SSHBUF_MAX_BIGNUM)
-		return SSH_ERR_INVALID_ARGUMENT;
 
 	/* hash the data */
-	nid = rsa_hash_alg_nid(hash_alg);
-	if ((dlen = ssh_digest_bytes(hash_alg)) == 0)
-		return SSH_ERR_INTERNAL_ERROR;
-	if ((ret = ssh_digest_memory(hash_alg, data, datalen,
-	    digest, sizeof(digest))) != 0)
-		goto out;
+	evp_md = EVP_get_digestbynid(rsa_hash_alg_nid(hash_alg));
+	pkey = EVP_PKEY_new();
+	if (evp_md == NULL || pkey == NULL)
+		return SSH_ERR_LIBCRYPTO_ERROR;
+	EVP_PKEY_set1_RSA(pkey, key->rsa);
+	slen = EVP_PKEY_size(pkey);
+	if (slen <= 0 || slen > SSHBUF_MAX_BIGNUM) {
+		EVP_PKEY_free(pkey);
+		return SSH_ERR_INVALID_ARGUMENT;
+	}
 
 	if ((sig = malloc(slen)) == NULL) {
+		EVP_PKEY_free(pkey);
 		ret = SSH_ERR_ALLOC_FAIL;
 		goto out;
 	}
 
-	if (RSA_sign(nid, digest, dlen, sig, &len, key->rsa) != 1) {
+	EVP_MD_CTX_init(&md);
+	if (EVP_SignInit_ex(&md, evp_md, NULL) != 1 ||
+	    EVP_SignUpdate(&md, data, datalen) != 1 ||
+	    EVP_SignFinal(&md, sig, &len, pkey) != 1) {
+		EVP_MD_CTX_cleanup(&md);
+		EVP_PKEY_free(pkey);
 		ret = SSH_ERR_LIBCRYPTO_ERROR;
 		goto out;
 	}
+	EVP_MD_CTX_cleanup(&md);
+	EVP_PKEY_free(pkey);
+
 	if (len < slen) {
 		size_t diff = slen - len;
 		memmove(sig + diff, sig, len);
@@ -214,7 +225,6 @@ ssh_rsa_sign(const struct sshkey *key, u
 		*lenp = len;
 	ret = 0;
  out:
-	explicit_bzero(digest, sizeof(digest));
 	freezero(sig, slen);
 	sshbuf_free(b);
 	return ret;
@@ -225,11 +235,14 @@ ssh_rsa_verify(const struct sshkey *key,
     const u_char *sig, size_t siglen, const u_char *data, size_t datalen,
     const char *alg)
 {
+	const EVP_MD *evp_md;
+	EVP_MD_CTX md;
+	EVP_PKEY *pkey;
 	char *sigtype = NULL;
 	int hash_alg, want_alg, ret = SSH_ERR_INTERNAL_ERROR;
-	size_t len = 0, diff, modlen, dlen;
+	size_t len = 0, diff, modlen;
 	struct sshbuf *b = NULL;
-	u_char digest[SSH_DIGEST_MAX_LENGTH], *osigblob, *sigblob = NULL;
+	u_char *osigblob, *sigblob = NULL;
 
 	if (key == NULL || key->rsa == NULL ||
 	    sshkey_type_plain(key->type) != KEY_RSA ||
@@ -287,140 +300,36 @@ ssh_rsa_verify(const struct sshkey *key,
 		explicit_bzero(sigblob, diff);
 		len = modlen;
 	}
-	if ((dlen = ssh_digest_bytes(hash_alg)) == 0) {
-		ret = SSH_ERR_INTERNAL_ERROR;
-		goto out;
+	evp_md = EVP_get_digestbynid(rsa_hash_alg_nid(hash_alg));
+	pkey = EVP_PKEY_new();
+	if (evp_md != NULL && pkey != NULL) {
+		EVP_PKEY_set1_RSA(pkey, key->rsa);
+
+		EVP_MD_CTX_init(&md);
+		if (EVP_VerifyInit_ex(&md, evp_md, NULL) == 1 &&
+		    EVP_VerifyUpdate(&md, data, datalen) == 1) {
+			ret = EVP_VerifyFinal(&md, sigblob, len, pkey);
+		}
+		EVP_MD_CTX_cleanup(&md);
+		EVP_PKEY_free(pkey);
+
+		switch (ret) {
+		case 1:
+			ret = 0;
+			break;
+		case 0:
+			ret = SSH_ERR_SIGNATURE_INVALID;
+			goto out;
+		default:
+			ret = SSH_ERR_LIBCRYPTO_ERROR;
+			goto out;
+		}
 	}
-	if ((ret = ssh_digest_memory(hash_alg, data, datalen,
-	    digest, sizeof(digest))) != 0)
-		goto out;
 
-	ret = openssh_RSA_verify(hash_alg, digest, dlen, sigblob, len,
-	    key->rsa);
  out:
 	freezero(sigblob, len);
 	free(sigtype);
 	sshbuf_free(b);
-	explicit_bzero(digest, sizeof(digest));
-	return ret;
-}
-
-/*
- * See:
- * http://www.rsasecurity.com/rsalabs/pkcs/pkcs-1/
- * ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-1/pkcs-1v2-1.asn
- */
-
-/*
- * id-sha1 OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
- *	oiw(14) secsig(3) algorithms(2) 26 }
- */
-static const u_char id_sha1[] = {
-	0x30, 0x21, /* type Sequence, length 0x21 (33) */
-	0x30, 0x09, /* type Sequence, length 0x09 */
-	0x06, 0x05, /* type OID, length 0x05 */
-	0x2b, 0x0e, 0x03, 0x02, 0x1a, /* id-sha1 OID */
-	0x05, 0x00, /* NULL */
-	0x04, 0x14  /* Octet string, length 0x14 (20), followed by sha1 hash */
-};
-
-/*
- * See http://csrc.nist.gov/groups/ST/crypto_apps_infra/csor/algorithms.html
- * id-sha256 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16) us(840)
- *      organization(1) gov(101) csor(3) nistAlgorithm(4) hashAlgs(2)
- *      id-sha256(1) }
- */
-static const u_char id_sha256[] = {
-	0x30, 0x31, /* type Sequence, length 0x31 (49) */
-	0x30, 0x0d, /* type Sequence, length 0x0d (13) */
-	0x06, 0x09, /* type OID, length 0x09 */
-	0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, /* id-sha256 */
-	0x05, 0x00, /* NULL */
-	0x04, 0x20  /* Octet string, length 0x20 (32), followed by sha256 hash */
-};
-
-/*
- * See http://csrc.nist.gov/groups/ST/crypto_apps_infra/csor/algorithms.html
- * id-sha512 OBJECT IDENTIFIER ::= { joint-iso-itu-t(2) country(16) us(840)
- *      organization(1) gov(101) csor(3) nistAlgorithm(4) hashAlgs(2)
- *      id-sha256(3) }
- */
-static const u_char id_sha512[] = {
-	0x30, 0x51, /* type Sequence, length 0x51 (81) */
-	0x30, 0x0d, /* type Sequence, length 0x0d (13) */
-	0x06, 0x09, /* type OID, length 0x09 */
-	0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, /* id-sha512 */
-	0x05, 0x00, /* NULL */
-	0x04, 0x40  /* Octet string, length 0x40 (64), followed by sha512 hash */
-};
-
-static int
-rsa_hash_alg_oid(int hash_alg, const u_char **oidp, size_t *oidlenp)
-{
-	switch (hash_alg) {
-	case SSH_DIGEST_SHA1:
-		*oidp = id_sha1;
-		*oidlenp = sizeof(id_sha1);
-		break;
-	case SSH_DIGEST_SHA256:
-		*oidp = id_sha256;
-		*oidlenp = sizeof(id_sha256);
-		break;
-	case SSH_DIGEST_SHA512:
-		*oidp = id_sha512;
-		*oidlenp = sizeof(id_sha512);
-		break;
-	default:
-		return SSH_ERR_INVALID_ARGUMENT;
-	}
-	return 0;
-}
-
-static int
-openssh_RSA_verify(int hash_alg, u_char *hash, size_t hashlen,
-    u_char *sigbuf, size_t siglen, RSA *rsa)
-{
-	size_t rsasize = 0, oidlen = 0, hlen = 0;
-	int ret, len, oidmatch, hashmatch;
-	const u_char *oid = NULL;
-	u_char *decrypted = NULL;
-
-	if ((ret = rsa_hash_alg_oid(hash_alg, &oid, &oidlen)) != 0)
-		return ret;
-	ret = SSH_ERR_INTERNAL_ERROR;
-	hlen = ssh_digest_bytes(hash_alg);
-	if (hashlen != hlen) {
-		ret = SSH_ERR_INVALID_ARGUMENT;
-		goto done;
-	}
-	rsasize = RSA_size(rsa);
-	if (rsasize <= 0 || rsasize > SSHBUF_MAX_BIGNUM ||
-	    siglen == 0 || siglen > rsasize) {
-		ret = SSH_ERR_INVALID_ARGUMENT;
-		goto done;
-	}
-	if ((decrypted = malloc(rsasize)) == NULL) {
-		ret = SSH_ERR_ALLOC_FAIL;
-		goto done;
-	}
-	if ((len = RSA_public_decrypt(siglen, sigbuf, decrypted, rsa,
-	    RSA_PKCS1_PADDING)) < 0) {
-		ret = SSH_ERR_LIBCRYPTO_ERROR;
-		goto done;
-	}
-	if (len < 0 || (size_t)len != hlen + oidlen) {
-		ret = SSH_ERR_INVALID_FORMAT;
-		goto done;
-	}
-	oidmatch = timingsafe_bcmp(decrypted, oid, oidlen) == 0;
-	hashmatch = timingsafe_bcmp(decrypted + oidlen, hash, hlen) == 0;
-	if (!oidmatch || !hashmatch) {
-		ret = SSH_ERR_SIGNATURE_INVALID;
-		goto done;
-	}
-	ret = 0;
-done:
-	freezero(decrypted, rsasize);
 	return ret;
 }
 #endif /* WITH_OPENSSL */
Index: openssh/sshkey.c
===================================================================
--- openssh.orig/sshkey.c
+++ openssh/sshkey.c
@@ -57,6 +57,7 @@
 #include "sshkey.h"
 #include "sshkey-xmss.h"
 #include "match.h"
+#include "fips.h"
 
 #include "xmss_fast.h"
 
@@ -143,12 +144,51 @@ static const struct keytype keytypes[] =
 	{ NULL, NULL, NULL, -1, -1, 0, 0 }
 };
 
+static const struct keytype keytypes_fips140_2[] = {
+#ifdef WITH_OPENSSL
+	{ "ssh-rsa", "RSA", KEY_RSA, 0, 0, 0 },
+	{ "rsa-sha2-256", "RSA", KEY_RSA, 0, 0, 1 },
+	{ "rsa-sha2-512", "RSA", KEY_RSA, 0, 0, 1 },
+	{ "ssh-dss", "DSA", KEY_DSA, 0, 0, 0 },
+# ifdef OPENSSL_HAS_ECC
+	{ "ecdsa-sha2-nistp256", "ECDSA", KEY_ECDSA, NID_X9_62_prime256v1, 0, 0 },
+	{ "ecdsa-sha2-nistp384", "ECDSA", KEY_ECDSA, NID_secp384r1, 0, 0 },
+#  ifdef OPENSSL_HAS_NISTP521
+	{ "ecdsa-sha2-nistp521", "ECDSA", KEY_ECDSA, NID_secp521r1, 0, 0 },
+#  endif /* OPENSSL_HAS_NISTP521 */
+# endif /* OPENSSL_HAS_ECC */
+	{ "ssh-rsa-cert-v01@openssh.com", "RSA-CERT", KEY_RSA_CERT, 0, 1, 0 },
+	{ "ssh-dss-cert-v01@openssh.com", "DSA-CERT", KEY_DSA_CERT, 0, 1, 0 },
+# ifdef OPENSSL_HAS_ECC
+	{ "ecdsa-sha2-nistp256-cert-v01@openssh.com", "ECDSA-CERT",
+	    KEY_ECDSA_CERT, NID_X9_62_prime256v1, 1, 0 },
+	{ "ecdsa-sha2-nistp384-cert-v01@openssh.com", "ECDSA-CERT",
+	    KEY_ECDSA_CERT, NID_secp384r1, 1, 0 },
+#  ifdef OPENSSL_HAS_NISTP521
+	{ "ecdsa-sha2-nistp521-cert-v01@openssh.com", "ECDSA-CERT",
+	    KEY_ECDSA_CERT, NID_secp521r1, 1, 0 },
+#  endif /* OPENSSL_HAS_NISTP521 */
+# endif /* OPENSSL_HAS_ECC */
+#endif /* WITH_OPENSSL */
+	{ NULL, NULL, -1, -1, 0, 0 }
+};
+
+static const struct keytype *
+fips_select_keytypes(void)
+{
+	if (fips_mode()) {
+		return keytypes_fips140_2;
+	}
+
+	return keytypes;
+}
+
 const char *
 sshkey_type(const struct sshkey *k)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->type == k->type)
 			return kt->shortname;
 	}
@@ -160,7 +200,7 @@ sshkey_ssh_name_from_type_nid(int type,
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->type == type && (kt->nid == 0 || kt->nid == nid))
 			return kt->name;
 	}
@@ -172,7 +212,7 @@ sshkey_type_is_cert(int type)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->type == type)
 			return kt->cert;
 	}
@@ -197,7 +237,7 @@ sshkey_type_from_name(const char *name)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		/* Only allow shortname matches for plain key types */
 		if ((kt->name != NULL && strcmp(name, kt->name) == 0) ||
 		    (!kt->cert && strcasecmp(kt->shortname, name) == 0))
@@ -211,7 +251,7 @@ sshkey_ecdsa_nid_from_name(const char *n
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->type != KEY_ECDSA && kt->type != KEY_ECDSA_CERT)
 			continue;
 		if (kt->name != NULL && strcmp(name, kt->name) == 0)
@@ -227,7 +267,7 @@ sshkey_alg_list(int certs_only, int plai
 	size_t nlen, rlen = 0;
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->name == NULL)
 			continue;
 		if (!include_sigonly && kt->sigonly)
@@ -269,7 +309,7 @@ sshkey_names_valid2(const char *names, i
 				 * If any has a positive or negative match then
 				 * the component is accepted.
 				 */
-				for (kt = keytypes; kt->type != -1; kt++) {
+				for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 					if (match_pattern_list(kt->name,
 					    p, 0) != 0)
 						break;
@@ -1651,6 +1691,10 @@ sshkey_generate(int type, u_int bits, st
 		return SSH_ERR_ALLOC_FAIL;
 	switch (type) {
 	case KEY_ED25519:
+		if (fips_mode()) {
+			/* ED25519 disabled in FIPS mode */
+			break;
+		}
 		if ((k->ed25519_pk = malloc(ED25519_PK_SZ)) == NULL ||
 		    (k->ed25519_sk = malloc(ED25519_SK_SZ)) == NULL) {
 			ret = SSH_ERR_ALLOC_FAIL;
@@ -3730,7 +3774,7 @@ sshkey_private_to_fileblob(struct sshkey
 	case KEY_DSA:
 	case KEY_ECDSA:
 	case KEY_RSA:
-		if (force_new_format) {
+		if (force_new_format && !fips_mode()) {
 			return sshkey_private_to_blob2(key, blob, passphrase,
 			    comment, new_format_cipher, new_format_rounds);
 		}
@@ -3741,6 +3785,10 @@ sshkey_private_to_fileblob(struct sshkey
 #ifdef WITH_XMSS
 	case KEY_XMSS:
 #endif /* WITH_XMSS */
+		if (fips_mode()) {
+			/* ED25519 not supported in FIPS mode */
+			return SSH_ERR_KEY_TYPE_UNKNOWN;
+		}
 		return sshkey_private_to_blob2(key, blob, passphrase,
 		    comment, new_format_cipher, new_format_rounds);
 	default:
@@ -3927,11 +3975,17 @@ sshkey_parse_private_fileblob_type(struc
 #ifdef WITH_XMSS
 	case KEY_XMSS:
 #endif /* WITH_XMSS */
+		if (fips_mode()) {
+			/* ED25519 keys unavailable in FIPS mode */
+			return SSH_ERR_INVALID_FORMAT;
+		}
 		return sshkey_parse_private2(blob, type, passphrase,
 		    keyp, commentp);
 	case KEY_UNSPEC:
-		r = sshkey_parse_private2(blob, type, passphrase, keyp,
-		    commentp);
+		if (!fips_mode()) {
+			r = sshkey_parse_private2(blob, type, passphrase, keyp,
+			    commentp);
+		}
 		/* Do not fallback to PEM parser if only passphrase is wrong. */
 		if (r == 0 || r == SSH_ERR_KEY_WRONG_PASSPHRASE)
 			return r;
Index: openssh/readconf.c
===================================================================
--- openssh.orig/readconf.c
+++ openssh/readconf.c
@@ -69,6 +69,7 @@
 #include "uidswap.h"
 #include "myproposal.h"
 #include "digest.h"
+#include "fips.h"
 
 /* Format of the configuration file:
 
@@ -2083,7 +2084,7 @@ fill_default_options(Options * options)
 		options->fingerprint_hash = SSH_FP_HASH_DEFAULT;
 	if (options->update_hostkeys == -1)
 		options->update_hostkeys = 0;
-
+	    
 	/* Expand KEX name lists */
 	all_cipher = cipher_alg_list(',', 0);
 	all_mac = mac_alg_list(',');
@@ -2095,11 +2096,19 @@ fill_default_options(Options * options)
 		    defaults, all)) != 0) \
 			fatal("%s: %s: %s", __func__, #what, ssh_err(r)); \
 	} while (0)
-	ASSEMBLE(ciphers, KEX_SERVER_ENCRYPT, all_cipher);
-	ASSEMBLE(macs, KEX_SERVER_MAC, all_mac);
-	ASSEMBLE(kex_algorithms, KEX_SERVER_KEX, all_kex);
-	ASSEMBLE(hostbased_key_types, KEX_DEFAULT_PK_ALG, all_key);
-	ASSEMBLE(pubkey_key_types, KEX_DEFAULT_PK_ALG, all_key);
+	if (fips_mode()) {
+	  ASSEMBLE(ciphers, KEX_FIPS_140_2_CLIENT_ENCRYPT, all_cipher);
+	  ASSEMBLE(macs, KEX_FIPS_140_2_CLIENT_MAC, all_mac);
+	  ASSEMBLE(kex_algorithms, KEX_FIPS_140_2_CLIENT_KEX, all_kex);
+	  ASSEMBLE(hostbased_key_types, KEX_FIPS_140_2_PK_ALG, all_key);
+	  ASSEMBLE(pubkey_key_types, KEX_FIPS_140_2_PK_ALG, all_key);
+	} else {
+	  ASSEMBLE(ciphers, KEX_SERVER_ENCRYPT, all_cipher);
+	  ASSEMBLE(macs, KEX_SERVER_MAC, all_mac);
+	  ASSEMBLE(kex_algorithms, KEX_SERVER_KEX, all_kex);
+	  ASSEMBLE(hostbased_key_types, KEX_DEFAULT_PK_ALG, all_key);
+	  ASSEMBLE(pubkey_key_types, KEX_DEFAULT_PK_ALG, all_key);
+	}
 #undef ASSEMBLE
 	free(all_cipher);
 	free(all_mac);
Index: openssh/servconf.c
===================================================================
--- openssh.orig/servconf.c
+++ openssh/servconf.c
@@ -64,6 +64,7 @@
 #include "auth.h"
 #include "myproposal.h"
 #include "digest.h"
+#include "fips.h"
 
 static void add_listen_addr(ServerOptions *, const char *,
     const char *, int);
@@ -204,12 +205,21 @@ assemble_algorithms(ServerOptions *o)
 		if ((r = kex_assemble_names(&o->what, defaults, all)) != 0) \
 			fatal("%s: %s: %s", __func__, #what, ssh_err(r)); \
 	} while (0)
-	ASSEMBLE(ciphers, KEX_SERVER_ENCRYPT, all_cipher);
-	ASSEMBLE(macs, KEX_SERVER_MAC, all_mac);
-	ASSEMBLE(kex_algorithms, KEX_SERVER_KEX, all_kex);
-	ASSEMBLE(hostkeyalgorithms, KEX_DEFAULT_PK_ALG, all_key);
-	ASSEMBLE(hostbased_key_types, KEX_DEFAULT_PK_ALG, all_key);
-	ASSEMBLE(pubkey_key_types, KEX_DEFAULT_PK_ALG, all_key);
+	if (fips_mode()) {
+	  ASSEMBLE(ciphers, KEX_FIPS_140_2_SERVER_ENCRYPT, all_cipher);
+	  ASSEMBLE(macs, KEX_FIPS_140_2_SERVER_MAC, all_mac);
+	  ASSEMBLE(kex_algorithms, KEX_FIPS_140_2_SERVER_KEX, all_kex);
+	  ASSEMBLE(hostkeyalgorithms, KEX_FIPS_140_2_PK_ALG, all_key);
+	  ASSEMBLE(hostbased_key_types, KEX_FIPS_140_2_PK_ALG, all_key);
+	  ASSEMBLE(pubkey_key_types, KEX_FIPS_140_2_PK_ALG, all_key);
+	} else {
+	  ASSEMBLE(ciphers, KEX_SERVER_ENCRYPT, all_cipher);
+	  ASSEMBLE(macs, KEX_SERVER_MAC, all_mac);
+	  ASSEMBLE(kex_algorithms, KEX_SERVER_KEX, all_kex);
+	  ASSEMBLE(hostkeyalgorithms, KEX_DEFAULT_PK_ALG, all_key);
+	  ASSEMBLE(hostbased_key_types, KEX_DEFAULT_PK_ALG, all_key);
+	  ASSEMBLE(pubkey_key_types, KEX_DEFAULT_PK_ALG, all_key);
+	}
 #undef ASSEMBLE
 	free(all_cipher);
 	free(all_mac);
@@ -2123,6 +2133,9 @@ process_server_config_line(ServerOptions
 		if ((value = ssh_digest_alg_by_name(arg)) == -1)
 			fatal("%.200s line %d: Invalid hash algorithm \"%s\".",
 			    filename, linenum, arg);
+		if (fips_mode() && value == SSH_DIGEST_MD5)
+			fatal("%.200s line %d: Hash algorithm not permitted \"%s\".",
+			    filename, linenum, arg);
 		if (*activep)
 			options->fingerprint_hash = value;
 		break;
