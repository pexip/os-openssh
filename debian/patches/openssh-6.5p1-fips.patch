diff --git a/Makefile.in b/Makefile.in
index 8344160..8b9af83 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -110,7 +110,7 @@ LIBSSH_OBJS=${LIBOPENSSH_OBJS} \
 	kexgexc.o kexgexs.o \
 	kexsntrup761x25519.o sntrup761.o kexgen.o \
 	sftp-realpath.o platform-pledge.o platform-tracing.o platform-misc.o \
-	sshbuf-io.o
+	sshbuf-io.o fips.o
 
 SKOBJS=	ssh-sk-client.o
 
diff --git a/cipher-ctr.c b/cipher-ctr.c
index 32771f2..f51d69c 100644
--- a/cipher-ctr.c
+++ b/cipher-ctr.c
@@ -26,6 +26,7 @@
 
 #include "xmalloc.h"
 #include "log.h"
+#include "fips.h"
 
 /* compatibility with old or broken OpenSSL versions */
 #include "openbsd-compat/openssl-compat.h"
@@ -139,6 +140,8 @@ evp_aes_128_ctr(void)
 #ifndef SSH_OLD_EVP
 	aes_ctr.flags = EVP_CIPH_CBC_MODE | EVP_CIPH_VARIABLE_LENGTH |
 	    EVP_CIPH_ALWAYS_CALL_INIT | EVP_CIPH_CUSTOM_IV;
+	if (fips_mode())
+		aes_ctr.flags |= EVP_CIPH_FLAG_FIPS;
 #endif
 	return (&aes_ctr);
 }
diff --git a/cipher.c b/cipher.c
index 8fb6d3c..238accc 100644
--- a/cipher.c
+++ b/cipher.c
@@ -48,6 +48,7 @@
 #include "sshbuf.h"
 #include "ssherr.h"
 #include "digest.h"
+#include "fips.h"
 
 #include "openbsd-compat/openssl-compat.h"
 
@@ -112,8 +113,36 @@ static const struct sshcipher ciphers[] = {
 	{ NULL,			0, 0, 0, 0, 0, NULL }
 };
 
+static const struct sshcipher ciphers_fips140_2[] = {
+	{ "aes128-cbc",		16, 16, 0, 0, CFLAG_CBC, EVP_aes_128_cbc },
+	{ "aes192-cbc",		16, 24, 0, 0, CFLAG_CBC, EVP_aes_192_cbc },
+	{ "aes256-cbc",		16, 32, 0, 0, CFLAG_CBC, EVP_aes_256_cbc },
+	{ "aes128-ctr",		16, 16, 0, 0, 0, EVP_aes_128_ctr },
+	{ "aes192-ctr",		16, 24, 0, 0, 0, EVP_aes_192_ctr },
+	{ "aes256-ctr",		16, 32, 0, 0, 0, EVP_aes_256_ctr },
+# ifdef OPENSSL_HAVE_EVPGCM
+	{ "aes128-gcm@openssh.com",
+				16, 16, 12, 16, 0, EVP_aes_128_gcm },
+	{ "aes256-gcm@openssh.com",
+				16, 32, 12, 16, 0, EVP_aes_256_gcm },
+# endif /* OPENSSL_HAVE_EVPGCM */
+	{ "none",		8, 0, 0, 0, CFLAG_NONE, NULL },
+
+	{ NULL,			0, 0, 0, 0, 0, NULL }
+};
+
 /*--*/
 
+static const struct sshcipher *
+fips_select_ciphers(void)
+{
+	if (fips_mode()) {
+		return ciphers_fips140_2;
+	}
+
+	return ciphers;
+}
+
 /* Returns a comma-separated list of supported ciphers. */
 char *
 cipher_alg_list(char sep, int auth_only)
@@ -122,7 +151,7 @@ cipher_alg_list(char sep, int auth_only)
 	size_t nlen, rlen = 0;
 	const struct sshcipher *c;
 
-	for (c = ciphers; c->name != NULL; c++) {
+	for (c = fips_select_ciphers(); c->name != NULL; c++) {
 		if ((c->flags & CFLAG_INTERNAL) != 0)
 			continue;
 		if (auth_only && c->auth_len == 0)
@@ -205,7 +234,7 @@ const struct sshcipher *
 cipher_by_name(const char *name)
 {
 	const struct sshcipher *c;
-	for (c = ciphers; c->name != NULL; c++)
+	for (c = fips_select_ciphers(); c->name != NULL; c++)
 		if (strcmp(c->name, name) == 0)
 			return c;
 	return NULL;
diff --git a/fips.c b/fips.c
new file mode 100644
index 0000000..a41b187
--- /dev/null
+++ b/fips.c
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2012 Petr Cerny.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <openssl/crypto.h>
+#include <openssl/evp.h>
+
+#include "fips.h"
+
+#include "log.h"
+
+int
+fips_mode()
+{
+	static int fips_state = -1;
+	if (-1 == fips_state) {
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
+		fips_state = FIPS_mode();
+#else
+		fips_state = EVP_default_properties_is_fips_enabled(NULL);
+#endif
+		if (fips_state)
+			debug("FIPS mode initialized");
+	}
+	return fips_state;
+}
diff --git a/fips.h b/fips.h
new file mode 100644
index 0000000..62d4b0f
--- /dev/null
+++ b/fips.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (c) 2012 Petr Cerny.  All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef FIPS_H
+#define FIPS_H
+
+int	 fips_mode(void);
+
+#endif
+
diff --git a/kex.c b/kex.c
index 761e72d..9a50a62 100644
--- a/kex.c
+++ b/kex.c
@@ -61,6 +61,7 @@
 #include "ssherr.h"
 #include "sshbuf.h"
 #include "digest.h"
+#include "fips.h"
 
 /* prototype */
 static int kex_choose_conf(struct ssh *);
@@ -118,6 +119,39 @@ static const struct kexalg kexalgs[] = {
 	{ NULL, 0, -1, -1},
 };
 
+static const struct kexalg kexalgs_fips140_2[] = {
+	{ KEX_DH1, KEX_DH_GRP1_SHA1, 0, SSH_DIGEST_SHA1 },
+	{ KEX_DH14_SHA1, KEX_DH_GRP14_SHA1, 0, SSH_DIGEST_SHA1 },
+	{ KEX_DH14_SHA256, KEX_DH_GRP14_SHA256, 0, SSH_DIGEST_SHA256 },
+	{ KEX_DH16_SHA512, KEX_DH_GRP16_SHA512, 0, SSH_DIGEST_SHA512 },
+	{ KEX_DH18_SHA512, KEX_DH_GRP18_SHA512, 0, SSH_DIGEST_SHA512 },
+	{ KEX_DHGEX_SHA1, KEX_DH_GEX_SHA1, 0, SSH_DIGEST_SHA1 },
+#ifdef HAVE_EVP_SHA256
+	{ KEX_DHGEX_SHA256, KEX_DH_GEX_SHA256, 0, SSH_DIGEST_SHA256 },
+#endif
+#ifdef OPENSSL_HAS_ECC
+	{ KEX_ECDH_SHA2_NISTP256, KEX_ECDH_SHA2,
+	    NID_X9_62_prime256v1, SSH_DIGEST_SHA256 },
+	{ KEX_ECDH_SHA2_NISTP384, KEX_ECDH_SHA2, NID_secp384r1,
+	    SSH_DIGEST_SHA384 },
+# ifdef OPENSSL_HAS_NISTP521
+	{ KEX_ECDH_SHA2_NISTP521, KEX_ECDH_SHA2, NID_secp521r1,
+	    SSH_DIGEST_SHA512 },
+# endif
+#endif
+	{ NULL, 0, -1, -1},
+};
+
+static const struct kexalg *
+fips_select_kexalgs(void)
+{
+	if (fips_mode()) {
+		return kexalgs_fips140_2;
+	}
+
+	return kexalgs;
+}
+
 char *
 kex_alg_list(char sep)
 {
@@ -125,7 +159,7 @@ kex_alg_list(char sep)
 	size_t nlen, rlen = 0;
 	const struct kexalg *k;
 
-	for (k = kexalgs; k->name != NULL; k++) {
+	for (k = fips_select_kexalgs(); k->name != NULL; k++) {
 		if (ret != NULL)
 			ret[rlen++] = sep;
 		nlen = strlen(k->name);
@@ -145,7 +179,7 @@ kex_alg_by_name(const char *name)
 {
 	const struct kexalg *k;
 
-	for (k = kexalgs; k->name != NULL; k++) {
+	for (k = fips_select_kexalgs(); k->name != NULL; k++) {
 		if (strcmp(k->name, name) == 0)
 			return k;
 	}
diff --git a/mac.c b/mac.c
index f3dda66..a0e9247 100644
--- a/mac.c
+++ b/mac.c
@@ -38,6 +38,7 @@
 #include "misc.h"
 #include "ssherr.h"
 #include "sshbuf.h"
+#include "fips.h"
 
 #include "openbsd-compat/openssl-compat.h"
 
@@ -79,6 +80,26 @@ static const struct macalg macs[] = {
 	{ NULL,					0, 0, 0, 0, 0, 0 }
 };
 
+static const struct macalg macs_fips140_2[] = {
+	{ "hmac-sha1",				SSH_DIGEST, SSH_DIGEST_SHA1, 0, 0, 0, 0 },
+	{ "hmac-sha2-256",			SSH_DIGEST, SSH_DIGEST_SHA256, 0, 0, 0, 0 },
+	{ "hmac-sha2-512",			SSH_DIGEST, SSH_DIGEST_SHA512, 0, 0, 0, 0 },
+	{ "hmac-sha1-etm@openssh.com",		SSH_DIGEST, SSH_DIGEST_SHA1, 0, 0, 0, 1 },
+	{ "hmac-sha2-256-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_SHA256, 0, 0, 0, 1 },
+	{ "hmac-sha2-512-etm@openssh.com",	SSH_DIGEST, SSH_DIGEST_SHA512, 0, 0, 0, 1 },
+	{ NULL,					0, 0, 0, 0, 0, 0 }
+};
+
+static const struct macalg *
+fips_select_macs(void)
+{
+	if (fips_mode()) {
+		return macs_fips140_2;
+	}
+
+	return macs;
+}
+
 /* Returns a list of supported MACs separated by the specified char. */
 char *
 mac_alg_list(char sep)
@@ -87,7 +108,7 @@ mac_alg_list(char sep)
 	size_t nlen, rlen = 0;
 	const struct macalg *m;
 
-	for (m = macs; m->name != NULL; m++) {
+	for (m = fips_select_macs(); m->name != NULL; m++) {
 		if (ret != NULL)
 			ret[rlen++] = sep;
 		nlen = strlen(m->name);
@@ -126,7 +147,7 @@ mac_setup(struct sshmac *mac, char *name)
 {
 	const struct macalg *m;
 
-	for (m = macs; m->name != NULL; m++) {
+	for (m = fips_select_macs(); m->name != NULL; m++) {
 		if (strcmp(name, m->name) != 0)
 			continue;
 		if (mac != NULL)
diff --git a/myproposal.h b/myproposal.h
index ee6e9f7..37fd507 100644
--- a/myproposal.h
+++ b/myproposal.h
@@ -38,6 +38,17 @@
 
 #define KEX_CLIENT_KEX KEX_SERVER_KEX
 
+#define KEX_FIPS_140_2_SERVER_KEX \
+	"ecdh-sha2-nistp256," \
+	"ecdh-sha2-nistp384," \
+	"ecdh-sha2-nistp521," \
+	"diffie-hellman-group-exchange-sha256," \
+	"diffie-hellman-group16-sha512," \
+	"diffie-hellman-group18-sha512," \
+	"diffie-hellman-group14-sha256"
+
+#define KEX_FIPS_140_2_CLIENT_KEX KEX_FIPS_140_2_SERVER_KEX
+
 #define	KEX_DEFAULT_PK_ALG	\
 	"ssh-ed25519-cert-v01@openssh.com," \
 	"ecdsa-sha2-nistp256-cert-v01@openssh.com," \
@@ -56,6 +67,20 @@
 	"rsa-sha2-512," \
 	"rsa-sha2-256"
 
+#define	KEX_FIPS_140_2_PK_ALG      \
+	"ecdsa-sha2-nistp256-cert-v01@openssh.com," \
+	"ecdsa-sha2-nistp384-cert-v01@openssh.com," \
+	"ecdsa-sha2-nistp521-cert-v01@openssh.com," \
+	"sk-ecdsa-sha2-nistp256-cert-v01@openssh.com," \
+	"rsa-sha2-512-cert-v01@openssh.com," \
+	"rsa-sha2-256-cert-v01@openssh.com," \
+	"ecdsa-sha2-nistp256," \
+	"ecdsa-sha2-nistp384," \
+	"ecdsa-sha2-nistp521," \
+	"sk-ecdsa-sha2-nistp256@openssh.com," \
+	"rsa-sha2-512," \
+	"rsa-sha2-256"
+
 #define	KEX_SERVER_ENCRYPT \
 	"chacha20-poly1305@openssh.com," \
 	"aes128-ctr,aes192-ctr,aes256-ctr," \
@@ -63,6 +88,12 @@
 
 #define KEX_CLIENT_ENCRYPT KEX_SERVER_ENCRYPT
 
+#define	KEX_FIPS_140_2_SERVER_ENCRYPT \
+	"aes128-ctr,aes192-ctr,aes256-ctr," \
+	"aes128-gcm@openssh.com,aes256-gcm@openssh.com"
+
+#define	KEX_FIPS_140_2_CLIENT_ENCRYPT KEX_FIPS_140_2_SERVER_ENCRYPT
+
 #define	KEX_SERVER_MAC \
 	"umac-64-etm@openssh.com," \
 	"umac-128-etm@openssh.com," \
@@ -77,6 +108,16 @@
 
 #define KEX_CLIENT_MAC KEX_SERVER_MAC
 
+#define	KEX_FIPS_140_2_SERVER_MAC		\
+	"hmac-sha2-256-etm@openssh.com," \
+	"hmac-sha2-512-etm@openssh.com," \
+	"hmac-sha1-etm@openssh.com," \
+	"hmac-sha2-256," \
+	"hmac-sha2-512," \
+	"hmac-sha1"
+
+#define	KEX_FIPS_140_2_CLIENT_MAC KEX_FIPS_140_2_SERVER_MAC
+
 /* Not a KEX value, but here so all the algorithm defaults are together */
 #define	SSH_ALLOWED_CA_SIGALGS	\
 	"ssh-ed25519," \
@@ -88,6 +129,14 @@
 	"rsa-sha2-512," \
 	"rsa-sha2-256"
 
+#define	SSH_FIPS_140_2_ALLOWED_CA_SIGALGS	\
+	"ecdsa-sha2-nistp256," \
+	"ecdsa-sha2-nistp384," \
+	"ecdsa-sha2-nistp521," \
+	"sk-ecdsa-sha2-nistp256@openssh.com," \
+	"rsa-sha2-512," \
+	"rsa-sha2-256"
+
 #define	KEX_DEFAULT_COMP	"none,zlib@openssh.com"
 #define	KEX_DEFAULT_LANG	""
 
diff --git a/openbsd-compat/arc4random.c b/openbsd-compat/arc4random.c
index ce5f054..d3dab72 100644
--- a/openbsd-compat/arc4random.c
+++ b/openbsd-compat/arc4random.c
@@ -215,29 +215,51 @@ _rs_random_u32(u_int32_t *val)
 	return;
 }
 
+#include <openssl/crypto.h>
+#include <openssl/evp.h>
+static int
+fips_mode(void)
+{
+	static int fips_state = -1;
+	if (-1 == fips_state) {
+#if OPENSSL_VERSION_NUMBER < 0x30000000L
+		fips_state = FIPS_mode();
+#else
+		fips_state = EVP_default_properties_is_fips_enabled(NULL);
+#endif
+		if (fips_state)
+			debug("FIPS mode initialized");
+	}
+	return fips_state;
+}
+
 void
 arc4random_stir(void)
 {
-	_ARC4_LOCK();
-	_rs_stir();
-	_ARC4_UNLOCK();
+	if (!fips_mode()) {
+		_ARC4_LOCK();
+		_rs_stir();
+		_ARC4_UNLOCK();
+	}
 }
 
 void
 arc4random_addrandom(u_char *dat, int datlen)
 {
-	int m;
-
-	_ARC4_LOCK();
-	if (!rs_initialized)
-		_rs_stir();
-	while (datlen > 0) {
-		m = MINIMUM(datlen, KEYSZ + IVSZ);
-		_rs_rekey(dat, m);
-		dat += m;
-		datlen -= m;
+	if (!fips_mode()) {
+		int m;
+
+		_ARC4_LOCK();
+		if (!rs_initialized)
+			_rs_stir();
+		while (datlen > 0) {
+			m = MINIMUM(datlen, KEYSZ + IVSZ);
+			_rs_rekey(dat, m);
+			dat += m;
+			datlen -= m;
+		}
+		_ARC4_UNLOCK();
 	}
-	_ARC4_UNLOCK();
 }
 
 u_int32_t
@@ -246,7 +270,11 @@ arc4random(void)
 	u_int32_t val;
 
 	_ARC4_LOCK();
-	_rs_random_u32(&val);
+	if (fips_mode()) {
+		RAND_bytes((u_int8_t *)&val, sizeof(val));
+	} else {
+		_rs_random_u32(&val);
+	}
 	_ARC4_UNLOCK();
 	return val;
 }
@@ -260,7 +288,11 @@ void
 arc4random_buf(void *buf, size_t n)
 {
 	_ARC4_LOCK();
-	_rs_random_buf(buf, n);
+	if (fips_mode()) {
+		RAND_bytes(buf, n);
+	} else {
+		_rs_random_buf(buf, n);
+	}
 	_ARC4_UNLOCK();
 }
 # endif /* !HAVE_ARC4RANDOM_BUF */
diff --git a/readconf.c b/readconf.c
index a0309dc..7d21888 100644
--- a/readconf.c
+++ b/readconf.c
@@ -67,6 +67,7 @@
 #include "uidswap.h"
 #include "myproposal.h"
 #include "digest.h"
+#include "fips.h"
 
 /* Format of the configuration file:
 
@@ -2652,11 +2653,19 @@ fill_default_options(Options * options)
 	all_key = sshkey_alg_list(0, 0, 1, ',');
 	all_sig = sshkey_alg_list(0, 1, 1, ',');
 	/* remove unsupported algos from default lists */
-	def_cipher = match_filter_allowlist(KEX_CLIENT_ENCRYPT, all_cipher);
-	def_mac = match_filter_allowlist(KEX_CLIENT_MAC, all_mac);
-	def_kex = match_filter_allowlist(KEX_CLIENT_KEX, all_kex);
-	def_key = match_filter_allowlist(KEX_DEFAULT_PK_ALG, all_key);
-	def_sig = match_filter_allowlist(SSH_ALLOWED_CA_SIGALGS, all_sig);
+	if (fips_mode()) {
+		def_cipher = match_filter_allowlist(KEX_FIPS_140_2_CLIENT_ENCRYPT, all_cipher);
+		def_mac = match_filter_allowlist(KEX_FIPS_140_2_CLIENT_MAC, all_mac);
+		def_kex = match_filter_allowlist(KEX_FIPS_140_2_CLIENT_KEX, all_kex);
+		def_key = match_filter_allowlist(KEX_FIPS_140_2_PK_ALG, all_key);
+		def_sig = match_filter_allowlist(SSH_FIPS_140_2_ALLOWED_CA_SIGALGS, all_sig);
+	} else {
+		def_cipher = match_filter_allowlist(KEX_CLIENT_ENCRYPT, all_cipher);
+		def_mac = match_filter_allowlist(KEX_CLIENT_MAC, all_mac);
+		def_kex = match_filter_allowlist(KEX_CLIENT_KEX, all_kex);
+		def_key = match_filter_allowlist(KEX_DEFAULT_PK_ALG, all_key);
+		def_sig = match_filter_allowlist(SSH_ALLOWED_CA_SIGALGS, all_sig);
+	}
 #define ASSEMBLE(what, defaults, all) \
 	do { \
 		if ((r = kex_assemble_names(&options->what, \
diff --git a/servconf.c b/servconf.c
index 516b3f1..56d2ec2 100644
--- a/servconf.c
+++ b/servconf.c
@@ -70,6 +70,7 @@
 #include "auth.h"
 #include "myproposal.h"
 #include "digest.h"
+#include "fips.h"
 
 static void add_listen_addr(ServerOptions *, const char *,
     const char *, int);
@@ -218,11 +219,19 @@ assemble_algorithms(ServerOptions *o)
 	all_key = sshkey_alg_list(0, 0, 1, ',');
 	all_sig = sshkey_alg_list(0, 1, 1, ',');
 	/* remove unsupported algos from default lists */
-	def_cipher = match_filter_allowlist(KEX_SERVER_ENCRYPT, all_cipher);
-	def_mac = match_filter_allowlist(KEX_SERVER_MAC, all_mac);
-	def_kex = match_filter_allowlist(KEX_SERVER_KEX, all_kex);
-	def_key = match_filter_allowlist(KEX_DEFAULT_PK_ALG, all_key);
-	def_sig = match_filter_allowlist(SSH_ALLOWED_CA_SIGALGS, all_sig);
+	if (fips_mode()) {
+		def_cipher = match_filter_allowlist(KEX_FIPS_140_2_SERVER_ENCRYPT, all_cipher);
+		def_mac = match_filter_allowlist(KEX_FIPS_140_2_SERVER_MAC, all_mac);
+		def_kex = match_filter_allowlist(KEX_FIPS_140_2_SERVER_KEX, all_kex);
+		def_key = match_filter_allowlist(KEX_FIPS_140_2_PK_ALG, all_key);
+		def_sig = match_filter_allowlist(SSH_FIPS_140_2_ALLOWED_CA_SIGALGS, all_sig);
+	} else {
+		def_cipher = match_filter_allowlist(KEX_SERVER_ENCRYPT, all_cipher);
+		def_mac = match_filter_allowlist(KEX_SERVER_MAC, all_mac);
+		def_kex = match_filter_allowlist(KEX_SERVER_KEX, all_kex);
+		def_key = match_filter_allowlist(KEX_DEFAULT_PK_ALG, all_key);
+		def_sig = match_filter_allowlist(SSH_ALLOWED_CA_SIGALGS, all_sig);
+	}
 #define ASSEMBLE(what, defaults, all) \
 	do { \
 		if ((r = kex_assemble_names(&o->what, defaults, all)) != 0) \
@@ -2412,6 +2421,9 @@ process_server_config_line_depth(ServerOptions *options, char *line,
 		if ((value = ssh_digest_alg_by_name(arg)) == -1)
 			fatal("%.200s line %d: Invalid %s algorithm \"%s\".",
 			    filename, linenum, keyword, arg);
+		if (fips_mode() && value == SSH_DIGEST_MD5)
+			fatal("%.200s line %d: %s algorithm not permitted \"%s\".",
+			    filename, linenum, keyword, arg);
 		if (*activep)
 			options->fingerprint_hash = value;
 		break;
diff --git a/sshkey.c b/sshkey.c
index 0e9d153..5b51fe9 100644
--- a/sshkey.c
+++ b/sshkey.c
@@ -58,6 +58,7 @@
 #include "sshkey.h"
 #include "match.h"
 #include "ssh-sk.h"
+#include "fips.h"
 
 #ifdef WITH_XMSS
 #include "sshkey-xmss.h"
@@ -165,12 +166,61 @@ static const struct keytype keytypes[] = {
 	{ NULL, NULL, NULL, -1, -1, 0, 0 }
 };
 
+static const struct keytype keytypes_fips140_2[] = {
+#ifdef WITH_OPENSSL
+	{ "ssh-rsa", "RSA", NULL, KEY_RSA, 0, 0, 0 },
+	{ "rsa-sha2-256", "RSA", NULL, KEY_RSA, 0, 0, 1 },
+	{ "rsa-sha2-512", "RSA", NULL, KEY_RSA, 0, 0, 1 },
+	{ "ssh-dss", "DSA", NULL, KEY_DSA, 0, 0, 0 },
+# ifdef OPENSSL_HAS_ECC
+	{ "ecdsa-sha2-nistp256", "ECDSA", NULL, KEY_ECDSA, NID_X9_62_prime256v1, 0, 0 },
+	{ "ecdsa-sha2-nistp384", "ECDSA", NULL, KEY_ECDSA, NID_secp384r1, 0, 0 },
+#  ifdef OPENSSL_HAS_NISTP521
+	{ "ecdsa-sha2-nistp521", "ECDSA", NULL, KEY_ECDSA, NID_secp521r1, 0, 0 },
+#  endif /* OPENSSL_HAS_NISTP521 */
+	{ "sk-ecdsa-sha2-nistp256@openssh.com", "ECDSA-SK", NULL,
+	    KEY_ECDSA_SK, NID_X9_62_prime256v1, 0, 0 },
+	{ "webauthn-sk-ecdsa-sha2-nistp256@openssh.com", "ECDSA-SK", NULL,
+	    KEY_ECDSA_SK, NID_X9_62_prime256v1, 0, 1 },
+# endif /* OPENSSL_HAS_ECC */
+	{ "ssh-rsa-cert-v01@openssh.com", "RSA-CERT", NULL, KEY_RSA_CERT, 0, 1, 0 },
+	{ "rsa-sha2-256-cert-v01@openssh.com", "RSA-CERT",
+	    "rsa-sha2-256", KEY_RSA_CERT, 0, 1, 1 },
+	{ "rsa-sha2-512-cert-v01@openssh.com", "RSA-CERT",
+	    "rsa-sha2-512", KEY_RSA_CERT, 0, 1, 1 },
+	{ "ssh-dss-cert-v01@openssh.com", "DSA-CERT", NULL, KEY_DSA_CERT, 0, 1, 0 },
+# ifdef OPENSSL_HAS_ECC
+	{ "ecdsa-sha2-nistp256-cert-v01@openssh.com", "ECDSA-CERT", NULL,
+	    KEY_ECDSA_CERT, NID_X9_62_prime256v1, 1, 0 },
+	{ "ecdsa-sha2-nistp384-cert-v01@openssh.com", "ECDSA-CERT", NULL,
+	    KEY_ECDSA_CERT, NID_secp384r1, 1, 0 },
+#  ifdef OPENSSL_HAS_NISTP521
+	{ "ecdsa-sha2-nistp521-cert-v01@openssh.com", "ECDSA-CERT", NULL,
+	    KEY_ECDSA_CERT, NID_secp521r1, 1, 0 },
+#  endif /* OPENSSL_HAS_NISTP521 */
+	{ "sk-ecdsa-sha2-nistp256-cert-v01@openssh.com", "ECDSA-SK-CERT", NULL,
+	    KEY_ECDSA_SK_CERT, NID_X9_62_prime256v1, 1, 0 },
+# endif /* OPENSSL_HAS_ECC */
+#endif /* WITH_OPENSSL */
+	{ NULL, NULL, NULL, -1, -1, 0, 0 }
+};
+
+static const struct keytype *
+fips_select_keytypes(void)
+{
+	if (fips_mode()) {
+		return keytypes_fips140_2;
+	}
+
+	return keytypes;
+}
+
 const char *
 sshkey_type(const struct sshkey *k)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->type == k->type)
 			return kt->shortname;
 	}
@@ -182,7 +232,7 @@ sshkey_ssh_name_from_type_nid(int type, int nid)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->type == type && (kt->nid == 0 || kt->nid == nid))
 			return kt->name;
 	}
@@ -194,7 +244,7 @@ sshkey_type_is_cert(int type)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->type == type)
 			return kt->cert;
 	}
@@ -219,7 +269,7 @@ sshkey_type_from_name(const char *name)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		/* Only allow shortname matches for plain key types */
 		if ((kt->name != NULL && strcmp(name, kt->name) == 0) ||
 		    (!kt->cert && strcasecmp(kt->shortname, name) == 0))
@@ -246,7 +296,7 @@ sshkey_ecdsa_nid_from_name(const char *name)
 {
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (!key_type_is_ecdsa_variant(kt->type))
 			continue;
 		if (kt->name != NULL && strcmp(name, kt->name) == 0)
@@ -285,7 +335,7 @@ sshkey_alg_list(int certs_only, int plain_only, int include_sigonly, char sep)
 	size_t nlen, rlen = 0;
 	const struct keytype *kt;
 
-	for (kt = keytypes; kt->type != -1; kt++) {
+	for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 		if (kt->name == NULL)
 			continue;
 		if (!include_sigonly && kt->sigonly)
@@ -327,7 +377,7 @@ sshkey_names_valid2(const char *names, int allow_wildcard)
 				 * If any has a positive or negative match then
 				 * the component is accepted.
 				 */
-				for (kt = keytypes; kt->type != -1; kt++) {
+				for (kt = fips_select_keytypes(); kt->type != -1; kt++) {
 					if (match_pattern_list(kt->name,
 					    p, 0) != 0)
 						break;
@@ -1820,6 +1870,10 @@ sshkey_generate(int type, u_int bits, struct sshkey **keyp)
 		return SSH_ERR_ALLOC_FAIL;
 	switch (type) {
 	case KEY_ED25519:
+		if (fips_mode()) {
+			/* ED25519 disabled in FIPS mode */
+			break;
+		}
 		if ((k->ed25519_pk = malloc(ED25519_PK_SZ)) == NULL ||
 		    (k->ed25519_sk = malloc(ED25519_SK_SZ)) == NULL) {
 			ret = SSH_ERR_ALLOC_FAIL;
@@ -5107,6 +5161,10 @@ sshkey_private_to_fileblob(struct sshkey *key, struct sshbuf *blob,
 #ifdef WITH_OPENSSL
 	case KEY_ECDSA_SK:
 #endif /* WITH_OPENSSL */
+		if (fips_mode() && key->type != KEY_ECDSA_SK) {
+			/* ED25519 not supported in FIPS mode */
+			return SSH_ERR_KEY_TYPE_UNKNOWN;
+		}
 		return sshkey_private_to_blob2(key, blob, passphrase,
 		    comment, openssh_format_cipher, openssh_format_rounds);
 	default:
@@ -5114,6 +5172,8 @@ sshkey_private_to_fileblob(struct sshkey *key, struct sshbuf *blob,
 	}
 
 #ifdef WITH_OPENSSL
+	if (fips_mode())
+	    format = SSHKEY_PRIVATE_PEM;
 	switch (format) {
 	case SSHKEY_PRIVATE_OPENSSH:
 		return sshkey_private_to_blob2(key, blob, passphrase,
@@ -5388,12 +5448,20 @@ sshkey_parse_private_fileblob_type(struct sshbuf *blob, int type,
 	switch (type) {
 	case KEY_ED25519:
 	case KEY_XMSS:
+		if (fips_mode()) {
+			/* ED25519 keys unavailable in FIPS mode */
+			return SSH_ERR_INVALID_FORMAT;
+		}
 		/* No fallback for new-format-only keys */
 		return sshkey_parse_private2(blob, type, passphrase,
 		    keyp, commentp);
 	default:
-		r = sshkey_parse_private2(blob, type, passphrase, keyp,
-		    commentp);
+		if (!fips_mode()) {
+			r = sshkey_parse_private2(blob, type, passphrase, keyp,
+			    commentp);
+		} else {
+			r = SSH_ERR_INVALID_FORMAT; /* to force fallback below */
+		}
 		/* Only fallback to PEM parser if a format error occurred. */
 		if (r != SSH_ERR_INVALID_FORMAT)
 			return r;
